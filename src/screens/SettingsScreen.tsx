import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  SafeAreaView,
  Switch,
  Alert,
  Dimensions,
} from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { Colors } from '../types';
import { useNotifications } from '../hooks/useNotifications';

const { width } = Dimensions.get('window');

interface SettingsSectionProps {
  title: string;
  children: React.ReactNode;
}

const SettingsSection: React.FC<SettingsSectionProps> = ({ title, children }) => (
  <View style={styles.section}>
    <Text style={styles.sectionTitle}>{title}</Text>
    <View style={styles.sectionContent}>
      {children}
    </View>
  </View>
);

interface SettingsItemProps {
  title: string;
  subtitle?: string;
  icon?: string;
  onPress?: () => void;
  rightElement?: React.ReactNode;
  disabled?: boolean;
}

const SettingsItem: React.FC<SettingsItemProps> = ({
  title,
  subtitle,
  icon,
  onPress,
  rightElement,
  disabled = false,
}) => (
  <TouchableOpacity
    style={[styles.settingsItem, disabled && styles.disabledItem]}
    onPress={onPress}
    disabled={disabled || !onPress}
    accessibilityRole="button"
    accessibilityLabel={title}
    accessibilityHint={subtitle}
  >
    <View style={styles.itemLeft}>
      {icon && <Text style={styles.itemIcon}>{icon}</Text>}
      <View style={styles.itemText}>
        <Text style={[styles.itemTitle, disabled && styles.disabledText]}>{title}</Text>
        {subtitle && (
          <Text style={[styles.itemSubtitle, disabled && styles.disabledText]}>
            {subtitle}
          </Text>
        )}
      </View>
    </View>
    <View style={styles.itemRight}>
      {rightElement}
      {onPress && !rightElement && (
        <Text style={[styles.chevron, disabled && styles.disabledText]}>‚Ä∫</Text>
      )}
    </View>
  </TouchableOpacity>
);

const SettingsScreen: React.FC = () => {
  const [notificationState, notificationActions] = useNotifications('demo-user'); // TODO: ÂÆüÈöõ„ÅÆ„É¶„Éº„Ç∂„ÉºID„Çí‰ΩøÁî®
  const [appVersion] = useState('1.0.0');

  const handleClearNotificationHistory = async () => {
    Alert.alert(
      'ÈÄöÁü•Â±•Ê≠¥„ÅÆÂâäÈô§',
      'ÈÄöÁü•Â±•Ê≠¥„Çí„Åô„Åπ„Å¶ÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü„Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åõ„Çì„ÄÇ',
      [
        { text: '„Ç≠„É£„É≥„Çª„É´', style: 'cancel' },
        {
          text: 'ÂâäÈô§',
          style: 'destructive',
          onPress: async () => {
            await notificationActions.clearHistory();
            Alert.alert('ÂÆå‰∫Ü', 'ÈÄöÁü•Â±•Ê≠¥„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü');
          },
        },
      ]
    );
  };

  const handleResetNotificationSettings = async () => {
    Alert.alert(
      'ÈÄöÁü•Ë®≠ÂÆö„ÅÆ„É™„Çª„ÉÉ„Éà',
      'ÈÄöÁü•Ë®≠ÂÆö„Çí„Éá„Éï„Ç©„É´„Éà„Å´Êàª„Åó„Åæ„Åô„ÅãÔºü',
      [
        { text: '„Ç≠„É£„É≥„Çª„É´', style: 'cancel' },
        {
          text: '„É™„Çª„ÉÉ„Éà',
          style: 'destructive',
          onPress: async () => {
            await notificationActions.updateSettings({
              enabled: true,
              waterReminders: true,
              medicationReminders: true,
              dailySummary: true,
              emergencyAlerts: true,
              sound: true,
              vibration: true,
            });
            Alert.alert('ÂÆå‰∫Ü', 'ÈÄöÁü•Ë®≠ÂÆö„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åó„Åü');
          },
        },
      ]
    );
  };

  const handleTestNotification = async () => {
    await notificationActions.sendTestNotification();
    Alert.alert('„ÉÜ„Çπ„ÉàÂÆå‰∫Ü', '„ÉÜ„Çπ„ÉàÈÄöÁü•„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü');
  };

  const getNotificationStatusText = () => {
    if (!notificationState.isInitialized) return 'ÂàùÊúüÂåñ‰∏≠...';
    if (!notificationState.hasPermission) return 'Ë®±ÂèØ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì';
    if (!notificationState.settings.enabled) return 'ÁÑ°Âäπ';
    return 'ÊúâÂäπ';
  };

  const getNotificationStatusColor = () => {
    if (!notificationState.isInitialized) return Colors.warning;
    if (!notificationState.hasPermission) return Colors.error;
    if (!notificationState.settings.enabled) return Colors.textSecondary;
    return Colors.success;
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="light" backgroundColor={Colors.primary} />
      
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        {/* „Ç¢„Éó„É™ÊÉÖÂ†± */}
        <SettingsSection title="„Ç¢„Éó„É™ÊÉÖÂ†±">
          <SettingsItem
            title="MiraiCare"
            subtitle={`„Éê„Éº„Ç∏„Éß„É≥ ${appVersion}`}
            icon="üì±"
          />
        </SettingsSection>

        {/* ÈÄöÁü•Ë®≠ÂÆö */}
        <SettingsSection title="ÈÄöÁü•Ë®≠ÂÆö">
          <SettingsItem
            title="„Éó„ÉÉ„Ç∑„É•ÈÄöÁü•"
            subtitle={`ÁèæÂú®„ÅÆÁä∂ÊÖã: ${getNotificationStatusText()}`}
            icon="üîî"
            rightElement={
              <View style={[
                styles.statusBadge,
                { backgroundColor: getNotificationStatusColor() }
              ]}>
                <Text style={styles.statusText}>
                  {notificationState.settings.enabled ? 'ON' : 'OFF'}
                </Text>
              </View>
            }
          />

          <SettingsItem
            title="Ê∞¥ÂàÜË£úÁµ¶„É™„Éû„Ç§„É≥„ÉÄ„Éº"
            subtitle="ÂÆöÊúüÁöÑ„Å™Ê∞¥ÂàÜË£úÁµ¶„ÅÆÈÄöÁü•"
            icon="üíß"
            rightElement={
              <Switch
                value={notificationState.settings.waterReminders}
                onValueChange={async (value) => {
                  await notificationActions.updateSettings({ waterReminders: value });
                }}
                trackColor={{ false: '#E0E0E0', true: Colors.secondary }}
                thumbColor={notificationState.settings.waterReminders ? Colors.surface : '#F4F3F4'}
                disabled={!notificationState.settings.enabled}
              />
            }
            disabled={!notificationState.settings.enabled}
          />

          <SettingsItem
            title="ÊúçËñ¨„É™„Éû„Ç§„É≥„ÉÄ„Éº"
            subtitle="Ëñ¨„ÅÆÊúçÁî®ÊôÇÈñì„ÅÆÈÄöÁü•"
            icon="üíä"
            rightElement={
              <Switch
                value={notificationState.settings.medicationReminders}
                onValueChange={async (value) => {
                  await notificationActions.updateSettings({ medicationReminders: value });
                }}
                trackColor={{ false: '#E0E0E0', true: Colors.success }}
                thumbColor={notificationState.settings.medicationReminders ? Colors.surface : '#F4F3F4'}
                disabled={!notificationState.settings.enabled}
              />
            }
            disabled={!notificationState.settings.enabled}
          />

          <SettingsItem
            title="Êó•Ê¨°„Çµ„Éû„É™„Éº"
            subtitle="1Êó•„ÅÆÊåØ„ÇäËøî„Çä„Å®ÊòéÊó•„ÅÆÁõÆÊ®ô"
            icon="üìä"
            rightElement={
              <Switch
                value={notificationState.settings.dailySummary}
                onValueChange={async (value) => {
                  await notificationActions.updateSettings({ dailySummary: value });
                }}
                trackColor={{ false: '#E0E0E0', true: Colors.info }}
                thumbColor={notificationState.settings.dailySummary ? Colors.surface : '#F4F3F4'}
                disabled={!notificationState.settings.enabled}
              />
            }
            disabled={!notificationState.settings.enabled}
          />

          <SettingsItem
            title="Á∑äÊÄ•„Ç¢„É©„Éº„Éà"
            subtitle="ÈáçË¶Å„Å™ÂÅ•Â∫∑Èñ¢ÈÄ£„ÅÆÈÄöÁü•"
            icon="üö®"
            rightElement={
              <Switch
                value={notificationState.settings.emergencyAlerts}
                onValueChange={async (value) => {
                  await notificationActions.updateSettings({ emergencyAlerts: value });
                }}
                trackColor={{ false: '#E0E0E0', true: Colors.error }}
                thumbColor={notificationState.settings.emergencyAlerts ? Colors.surface : '#F4F3F4'}
                disabled={!notificationState.settings.enabled}
              />
            }
            disabled={!notificationState.settings.enabled}
          />
        </SettingsSection>

        {/* Èü≥Â£∞„Éª„Éê„Ç§„Éñ„É¨„Éº„Ç∑„Éß„É≥Ë®≠ÂÆö */}
        <SettingsSection title="Èü≥Â£∞„Éª„Éê„Ç§„Éñ„É¨„Éº„Ç∑„Éß„É≥">
          <SettingsItem
            title="Èü≥Â£∞ÈÄöÁü•"
            subtitle="ÈÄöÁü•Èü≥„ÇíÂÜçÁîü„Åô„Çã"
            icon="üîä"
            rightElement={
              <Switch
                value={notificationState.settings.sound}
                onValueChange={async (value) => {
                  await notificationActions.updateSettings({ sound: value });
                }}
                trackColor={{ false: '#E0E0E0', true: Colors.primary }}
                thumbColor={notificationState.settings.sound ? Colors.surface : '#F4F3F4'}
                disabled={!notificationState.settings.enabled}
              />
            }
            disabled={!notificationState.settings.enabled}
          />

          <SettingsItem
            title="„Éê„Ç§„Éñ„É¨„Éº„Ç∑„Éß„É≥"
            subtitle="Á´ØÊú´„ÇíÊåØÂãï„Åï„Åõ„Çã"
            icon="üì≥"
            rightElement={
              <Switch
                value={notificationState.settings.vibration}
                onValueChange={async (value) => {
                  await notificationActions.updateSettings({ vibration: value });
                }}
                trackColor={{ false: '#E0E0E0', true: Colors.primary }}
                thumbColor={notificationState.settings.vibration ? Colors.surface : '#F4F3F4'}
                disabled={!notificationState.settings.enabled}
              />
            }
            disabled={!notificationState.settings.enabled}
          />
        </SettingsSection>

        {/* ÈÄöÁü•Â±•Ê≠¥ */}
        <SettingsSection title="ÈÄöÁü•Â±•Ê≠¥">
          <SettingsItem
            title="ÈÄöÁü•Â±•Ê≠¥"
            subtitle={`Êú™Ë™≠: ${notificationState.unreadCount}‰ª∂`}
            icon="üìã"
            onPress={() => {
              // TODO: ÈÄöÁü•Â±•Ê≠¥ÁîªÈù¢„Å∏„ÅÆÈÅ∑Áßª
              Alert.alert('Ê∫ñÂÇô‰∏≠', 'ÈÄöÁü•Â±•Ê≠¥ÁîªÈù¢„ÅØÊ∫ñÂÇô‰∏≠„Åß„Åô');
            }}
          />

          <SettingsItem
            title="Â±•Ê≠¥„Çí„ÇØ„É™„Ç¢"
            subtitle="„Åô„Åπ„Å¶„ÅÆÈÄöÁü•Â±•Ê≠¥„ÇíÂâäÈô§"
            icon="üóëÔ∏è"
            onPress={handleClearNotificationHistory}
          />
        </SettingsSection>

        {/* „ÉÜ„Çπ„Éà„Éª„É°„É≥„ÉÜ„Éä„É≥„Çπ */}
        <SettingsSection title="„ÉÜ„Çπ„Éà„Éª„É°„É≥„ÉÜ„Éä„É≥„Çπ">
          <SettingsItem
            title="„ÉÜ„Çπ„ÉàÈÄöÁü•"
            subtitle="ÈÄöÁü•„ÅåÊ≠£Â∏∏„Å´Âãï‰Ωú„Åô„Çã„Åã„ÉÜ„Çπ„Éà"
            icon="üß™"
            onPress={handleTestNotification}
            disabled={!notificationState.settings.enabled}
          />

          <SettingsItem
            title="ÈÄöÁü•Ë®≠ÂÆö„Çí„É™„Çª„ÉÉ„Éà"
            subtitle="„Åô„Åπ„Å¶„ÅÆÈÄöÁü•Ë®≠ÂÆö„Çí„Éá„Éï„Ç©„É´„Éà„Å´Êàª„Åô"
            icon="üîÑ"
            onPress={handleResetNotificationSettings}
          />

          <SettingsItem
            title="ÈÄöÁü•„ÅÆÂÜçÂàùÊúüÂåñ"
            subtitle="ÈÄöÁü•„Çµ„Éº„Éì„Çπ„ÇíÂÜçËµ∑Âãï"
            icon="‚ö°"
            onPress={async () => {
              Alert.alert(
                'ÂÜçÂàùÊúüÂåñ',
                'ÈÄöÁü•„Çµ„Éº„Éì„Çπ„ÇíÂÜçÂàùÊúüÂåñ„Åó„Åæ„Åô„ÅãÔºü',
                [
                  { text: '„Ç≠„É£„É≥„Çª„É´', style: 'cancel' },
                  {
                    text: 'ÂÆüË°å',
                    onPress: async () => {
                      const success = await notificationActions.initialize();
                      Alert.alert(
                        success ? 'ÂÆå‰∫Ü' : '„Ç®„É©„Éº',
                        success 
                          ? 'ÈÄöÁü•„Çµ„Éº„Éì„Çπ„ÇíÂÜçÂàùÊúüÂåñ„Åó„Åæ„Åó„Åü' 
                          : 'ÂÜçÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
                      );
                    },
                  },
                ]
              );
            }}
          />
        </SettingsSection>

        {/* „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†± */}
        {__DEV__ && (
          <SettingsSection title="„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±">
            <SettingsItem
              title="ÈÄöÁü•ÂàùÊúüÂåñÁä∂ÊÖã"
              subtitle={notificationState.isInitialized ? 'ÂÆå‰∫Ü' : 'Êú™ÂÆå‰∫Ü'}
              icon="üîß"
            />
            
            <SettingsItem
              title="ÈÄöÁü•Ë®±ÂèØÁä∂ÊÖã"
              subtitle={notificationState.hasPermission ? 'Ë®±ÂèØÊ∏à„Åø' : 'Êú™Ë®±ÂèØ'}
              icon="üîê"
            />

            <SettingsItem
              title="„Éó„ÉÉ„Ç∑„É•„Éà„Éº„ÇØ„É≥"
              subtitle="„Éá„Éê„ÉÉ„Ç∞Áî®„Éà„Éº„ÇØ„É≥ÊÉÖÂ†±"
              icon="üîë"
              onPress={() => {
                // TODO: „Éà„Éº„ÇØ„É≥ÊÉÖÂ†±„ÅÆË°®Á§∫
                Alert.alert('„Éà„Éº„ÇØ„É≥', '„Éó„ÉÉ„Ç∑„É•ÈÄöÁü•„Éà„Éº„ÇØ„É≥ÊÉÖÂ†±');
              }}
            />
          </SettingsSection>
        )}

        {/* „Ç®„É©„ÉºË°®Á§∫ */}
        {notificationState.error && (
          <View style={styles.errorContainer}>
            <Text style={styles.errorText}>{notificationState.error}</Text>
          </View>
        )}

        {/* „Éï„ÉÉ„Çø„Éº */}
        <View style={styles.footer}>
          <Text style={styles.footerText}>
            MiraiCare - È´òÈΩ¢ËÄÖÂêë„Åë„Éò„É´„Çπ„Ç±„Ç¢„Ç¢„Éó„É™
          </Text>
          <Text style={styles.footerSubtext}>
            ¬© 2025 MiraiCare Team
          </Text>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.background,
  },
  scrollView: {
    flex: 1,
  },
  section: {
    backgroundColor: Colors.surface,
    marginBottom: 8,
    paddingVertical: 8,
  },
  sectionTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: Colors.textSecondary,
    paddingHorizontal: 20,
    paddingVertical: 8,
    textTransform: 'uppercase',
    letterSpacing: 0.5,
  },
  sectionContent: {
    paddingHorizontal: 20,
  },
  settingsItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: Colors.border,
    minHeight: 64,
  },
  disabledItem: {
    opacity: 0.5,
  },
  itemLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  itemIcon: {
    fontSize: 24,
    marginRight: 16,
    width: 32,
    textAlign: 'center',
  },
  itemText: {
    flex: 1,
  },
  itemTitle: {
    fontSize: 16,
    fontWeight: '500',
    color: Colors.text,
    marginBottom: 2,
  },
  itemSubtitle: {
    fontSize: 14,
    color: Colors.textSecondary,
  },
  disabledText: {
    opacity: 0.5,
  },
  itemRight: {
    flexDirection: 'row',
    alignItems: 'center',
    marginLeft: 16,
  },
  chevron: {
    fontSize: 24,
    color: Colors.textSecondary,
    fontWeight: '300',
  },
  statusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    minWidth: 40,
    alignItems: 'center',
  },
  statusText: {
    color: Colors.surface,
    fontSize: 12,
    fontWeight: 'bold',
  },
  errorContainer: {
    backgroundColor: Colors.surface,
    padding: 20,
    marginBottom: 8,
  },
  errorText: {
    color: Colors.error,
    fontSize: 14,
    textAlign: 'center',
  },
  footer: {
    padding: 32,
    alignItems: 'center',
  },
  footerText: {
    fontSize: 16,
    fontWeight: '500',
    color: Colors.textSecondary,
    textAlign: 'center',
    marginBottom: 4,
  },
  footerSubtext: {
    fontSize: 14,
    color: Colors.textSecondary,
    textAlign: 'center',
  },
});

export default SettingsScreen;