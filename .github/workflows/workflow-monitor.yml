name: Workflow Monitor

on:
  schedule:
    - cron: '0 6,18 * * *'  # 毎日6時・18時（JST 15時・3時）
  workflow_dispatch:
    inputs:
      force_full_check:
        description: '完全診断を強制実行'
        required: false
        default: false
        type: boolean

jobs:
  unified-monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: workflow-monitor
      cancel-in-progress: true
    permissions:
      contents: read
      issues: write
      actions: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Comprehensive workflow analysis
        id: analysis
        uses: actions/github-script@v7
        with:
          script: |
            const workflows = [
              { name: 'claude-unified-fix.yml', displayName: 'Claude Unified Fix', critical: true },
              { name: 'auto-error-detection.yml', displayName: 'Auto Error Detection', critical: true },
              { name: 'test.yml', displayName: 'RN Unit CI', critical: true },
              { name: 'claude.yml', displayName: 'Claude Code Actions', critical: false },
              { name: 'health-check.yml', displayName: 'Project Health Check', critical: false }
            ];
            
            let report = {
              summary: { total: 0, working: 0, issues: 0, warnings: 0 },
              critical_issues: [],
              warnings: [],
              cost_analysis: { total_runs: 0, failed_runs: 0, total_minutes: 0 }
            };
            
            const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000);
            
            for (const workflow of workflows) {
              report.summary.total++;
              
              try {
                const runs = await github.rest.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: workflow.name,
                  per_page: 20,
                  created: `>${yesterday.toISOString()}`
                });
                
                const totalRuns = runs.data.workflow_runs.length;
                const failedRuns = runs.data.workflow_runs.filter(run => run.conclusion === 'failure').length;
                const successRuns = runs.data.workflow_runs.filter(run => run.conclusion === 'success').length;
                
                // 実行時間計算
                const totalMinutes = runs.data.workflow_runs.reduce((sum, run) => {
                  if (run.updated_at && run.created_at) {
                    return sum + (new Date(run.updated_at) - new Date(run.created_at)) / (1000 * 60);
                  }
                  return sum;
                }, 0);
                
                report.cost_analysis.total_runs += totalRuns;
                report.cost_analysis.failed_runs += failedRuns;
                report.cost_analysis.total_minutes += totalMinutes;
                
                // 問題検知
                const failureRate = totalRuns > 0 ? failedRuns / totalRuns : 0;
                
                if (workflow.critical && failureRate > 0.5 && totalRuns > 2) {
                  report.critical_issues.push(`🔴 ${workflow.displayName}: 重要ワークフローの失敗率が高い (${Math.round(failureRate*100)}%)`);
                  report.summary.issues++;
                } else if (failureRate > 0.3 && totalRuns > 3) {
                  report.warnings.push(`🟡 ${workflow.displayName}: 失敗率が高い (${Math.round(failureRate*100)}%)`);
                  report.summary.warnings++;
                } else if (totalRuns > 0) {
                  report.summary.working++;
                }
                
                // 暴走検知（1時間で10回以上）
                const recentRuns = runs.data.workflow_runs.filter(run => 
                  new Date(run.created_at) > new Date(Date.now() - 60 * 60 * 1000)
                );
                
                if (recentRuns.length > 10) {
                  report.critical_issues.push(`🚨 ${workflow.displayName}: ワークフロー暴走 (1時間で${recentRuns.length}回実行)`);
                }
                
                // 長時間実行警告
                if (totalMinutes > 60 && totalRuns > 0) {
                  report.warnings.push(`⏱️ ${workflow.displayName}: 実行時間が長い (平均${Math.round(totalMinutes/totalRuns)}分)`);
                }
                
                console.log(`${workflow.displayName}: ${totalRuns}回実行, ${failedRuns}回失敗, ${Math.round(totalMinutes)}分`);
                
              } catch (error) {
                if (workflow.critical) {
                  report.critical_issues.push(`❌ ${workflow.displayName}: 監視エラー - ${error.message}`);
                  report.summary.issues++;
                } else {
                  report.warnings.push(`⚠️ ${workflow.displayName}: 監視エラー - ${error.message}`);
                  report.summary.warnings++;
                }
              }
            }
            
            // コスト分析
            const estimatedCost = report.cost_analysis.total_minutes * 0.008;
            const healthScore = Math.round((report.summary.working / report.summary.total) * 100);
            
            core.setOutput('health_score', healthScore);
            core.setOutput('has_critical_issues', report.critical_issues.length > 0);
            core.setOutput('estimated_cost', estimatedCost.toFixed(3));
            core.setOutput('total_runs', report.cost_analysis.total_runs);
            
            console.log(`健全性スコア: ${healthScore}%`);
            console.log(`推定コスト: $${estimatedCost.toFixed(3)}`);
            
            return report;

      - name: Create monitoring report (if issues found)
        if: steps.analysis.outputs.has_critical_issues == 'true' || github.event.inputs.force_full_check == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const report = ${{ steps.analysis.outputs.result }};
            const healthScore = '${{ steps.analysis.outputs.health_score }}';
            const estimatedCost = '${{ steps.analysis.outputs.estimated_cost }}';
            const totalRuns = '${{ steps.analysis.outputs.total_runs }}';
            
            const reportBody = `## 🔍 ワークフロー監視レポート\\n\\n### 📊 概要\\n- **健全性スコア**: ${healthScore}%\\n- **24時間の実行回数**: ${totalRuns}回\\n- **推定コスト**: $${estimatedCost}\\n- **重要な問題**: ${report.critical_issues.length}個\\n- **警告**: ${report.warnings.length}個\\n\\n${report.critical_issues.length > 0 ? '### 🚨 重要な問題\\n' + report.critical_issues.map(issue => `- ${issue}`).join('\\n') + '\\n\\n**即座に対応が必要です！**\\n\\n' : ''}${report.warnings.length > 0 ? '### ⚠️ 警告\\n' + report.warnings.map(warning => `- ${warning}`).join('\\n') + '\\n\\n' : ''}### 💰 コスト分析\\n- 総実行時間: ${Math.round(report.cost_analysis.total_minutes)}分\\n- 失敗による無駄: ${report.cost_analysis.failed_runs}回\\n- 効率化の余地: ${report.cost_analysis.failed_runs > 0 ? '有り' : '無し'}\\n\\n### 🔧 推奨アクション\\n${report.critical_issues.length > 0 ? '- [ ] 重要ワークフローの緊急修正\\n' : ''}${report.cost_analysis.total_minutes > 300 ? '- [ ] 実行時間の最適化\\n' : ''}${report.cost_analysis.failed_runs > 10 ? '- [ ] 失敗率の改善\\n' : ''}- [ ] ワークフロー設定の見直し\\n- [ ] 不要な実行の削減\\n\\n---\\n*最適化された監視システム - 12時間ごと実行*`;

            // 既存の監視レポートをチェック
            const existingReports = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'workflow-monitor',
              state: 'open'
            });

            const today = new Date().toISOString().split('T')[0];
            const existingToday = existingReports.data.find(issue => 
              issue.title.includes('ワークフロー監視') && 
              issue.title.includes(today)
            );

            if (!existingToday) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[monitor] ワークフロー監視レポート - ${today}`,
                body: reportBody,
                labels: ['workflow-monitor', 'auto-detected', report.critical_issues.length > 0 ? 'urgent' : 'low-priority']
              });
              
              console.log('監視レポートを作成しました');
            } else {
              console.log('今日の監視レポートは既に存在します');
            }

      - name: Auto-optimization suggestions
        if: steps.analysis.outputs.estimated_cost > 2.0
        uses: actions/github-script@v7
        with:
          script: |
            console.log('⚠️ 高コスト検出: 自動最適化を提案します');
            
            const suggestions = [
              '実行頻度の削減（30分→1時間）',
              'timeout設定の短縮',
              '不要なワークフローの無効化',
              'concurrency設定の追加',
              '条件分岐の最適化'
            ];
            
            console.log('最適化提案:');
            suggestions.forEach(suggestion => console.log(`- ${suggestion}`));

      - name: Success notification
        if: steps.analysis.outputs.has_critical_issues == 'false' && steps.analysis.outputs.health_score >= 80
        run: |
          echo "✅ ワークフローは正常に動作しています"
          echo "健全性スコア: ${{ steps.analysis.outputs.health_score }}%"
          echo "推定コスト: $${{ steps.analysis.outputs.estimated_cost }}" 