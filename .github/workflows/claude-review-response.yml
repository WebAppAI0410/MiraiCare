name: Claude Review Response

on:
  pull_request_review_comment:
    types: [created]
  issue_comment:
    types: [created]

jobs:
  claude-review-response:
    # @claude mention または特定のキーワードでトリガー
    if: |
      (github.event_name == 'pull_request_review_comment' && 
       (contains(github.event.comment.body, '@claude') || 
        contains(github.event.comment.body, 'claude fix') ||
        contains(github.event.comment.body, 'claude improve'))) ||
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request &&
       (contains(github.event.comment.body, '@claude') || 
        contains(github.event.comment.body, 'claude fix') ||
        contains(github.event.comment.body, 'claude improve')))
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # PRブランチをチェックアウト
          ref: ${{ github.event.pull_request.head.ref || github.event.issue.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Claude Review Response
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          timeout_minutes: "30"
          allowed_tools: "Bash(git status),Bash(git log),Bash(git diff),Bash(npm install),Bash(npm test),Bash(npm run lint),Bash(npm run lint:fix),Bash(npx tsc --noEmit),View,GlobTool,GrepTool,Edit"
          custom_instructions: |
            あなたはMiraiCare（React Native + TypeScript + Supabase）プロジェクトの専門エンジニアです。
            
            ## 重要なミッション
            人間のレビューコメントを詳細に分析し、要求された改善を実装してください。
            
            ## 対応パターン
            1. **コード修正要求**: 指摘された問題を直接修正
            2. **改善提案**: より良い実装方法を提案・実装
            3. **質問への回答**: コードの説明やドキュメント追加
            4. **テスト追加要求**: 適切なテストケースを追加
            5. **リファクタリング要求**: コードの構造改善
            
            ## 作業手順
            1. レビューコメントの内容を詳細に分析
            2. 要求された変更の範囲と影響を評価
            3. 最適な解決策を計画
            4. 段階的に実装・修正
            5. テストとlintで品質確認
            6. 変更内容をコミットしてPRに反映
            7. レビューコメントに対する回答をコメント
            
            ## 重要な制約
            - レビュアーの意図を正確に理解する
            - 既存の機能を破壊しない
            - パフォーマンスを悪化させない
            - セキュリティレベルを下げない
            - アクセシビリティ要件を満たす
            - 適切なテストを追加・更新
            
            ## 完了条件
            - レビューコメントの要求がすべて満たされている
            - TypeScriptエラーなし
            - ESLintエラーなし
            - テストが通る
            - 適切なコミットメッセージでコミット済み
            - レビューコメントに対する回答を投稿済み 