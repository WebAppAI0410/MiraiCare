name: Claude CI Autofix

on:
  workflow_run:
    workflows: ["RN Unit CI"]
    types: [completed]

jobs:
  autofix:
    if: github.event.workflow_run.conclusion == 'failure'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Get failure information and post Claude request
        uses: actions/github-script@v7
        env:
          TRIGGERING_RUN_ID: ${{ github.event.workflow_run.id }}
          HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
          PULL_REQUESTS_JSON: ${{ toJson(github.event.workflow_run.pull_requests) || '[]' }}
        with:
          script: |
            const triggering_run_id = process.env.TRIGGERING_RUN_ID;
            const head_branch = process.env.HEAD_BRANCH;
            let pull_requests = [];
            
            try {
              pull_requests = JSON.parse(process.env.PULL_REQUESTS_JSON);
            } catch (e) {
              console.error("Error parsing PULL_REQUESTS_JSON:", e);
              console.log("PULL_REQUESTS_JSON was:", process.env.PULL_REQUESTS_JSON);
            }

            console.log(`Triggering workflow run ID: ${triggering_run_id}`);
            console.log(`Head branch: ${head_branch}`);

            // 失敗したジョブの情報を取得
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: triggering_run_id,
            });
            
            const failedJobs = jobs.data.jobs.filter(job => job.conclusion === 'failure');
            
            if (failedJobs.length === 0) {
              console.log('No failed jobs found in the triggering workflow run.');
              return;
            }

            // 失敗したジョブのログを取得
            let errorLogs = '';
            for (const job of failedJobs) {
              console.log(`Failed Job: ${job.name}, ID: ${job.id}`);
              
              try {
                const logs = await github.rest.actions.downloadJobLogsForWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  job_id: job.id,
                });
                
                // ログの一部を抽出（長すぎる場合は切り詰め）
                const logText = logs.data.toString();
                const relevantLogs = logText.split('\n')
                  .filter(line => line.includes('error') || line.includes('Error') || line.includes('ERROR') || line.includes('failed') || line.includes('Failed'))
                  .slice(-20) // 最後の20行のエラー関連ログ
                  .join('\n');
                
                errorLogs += `\n### ${job.name} のエラーログ:\n\`\`\`\n${relevantLogs}\n\`\`\`\n`;
              } catch (logError) {
                console.error(`Failed to get logs for job ${job.id}:`, logError);
                errorLogs += `\n### ${job.name} のエラーログ:\nログの取得に失敗しました。\n`;
              }
            }

            // PRが存在する場合、コメントを投稿
            if (pull_requests && pull_requests.length > 0) {
              const prNumber = pull_requests[0].number;
              console.log(`Posting comment to PR #${prNumber}`);
              
              const commentBody = `@claude CI (ワークフロー: RN Unit CI) が失敗しました。以下のエラーログを分析して修正案を提案してください。

            失敗情報:
            - ワークフロー実行ID: ${triggering_run_id}
            - ブランチ: ${head_branch}
            - 失敗したジョブ数: ${failedJobs.length}

            エラーログ:
            ${errorLogs}

            修正案を提案し、可能であれば直接コードを修正してください。修正後は npm test でテストが通ることを確認してください。`;

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
              
              console.log(`Comment posted to PR #${prNumber}`);
            } else {
              console.log('No associated PR found. Cannot post comment.');
            } 