name: Auto Error Detection (Main Branch Only)

on:
  push:
    branches: [main]
  workflow_dispatch: {}
  # PRは削除 - claude-auto-fix-v2.ymlが効率的に処理

jobs:
  detect-main-errors:
    # mainブランチでのエラー検知のみ（PRは除外）
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: error-detection-main
      cancel-in-progress: true
    permissions:
      contents: read
      issues: write
      actions: read

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci || npm install
        continue-on-error: true

      - name: Run comprehensive error check
        id: error-check
        run: |
          echo "=== TypeScript Check ===" | tee error-summary.txt
          npx tsc --noEmit 2>&1 | tee -a error-summary.txt || echo "TypeScript failed"
          
          echo -e "\n=== ESLint Check ===" | tee -a error-summary.txt
          npm run lint 2>&1 | tee -a error-summary.txt || echo "ESLint failed"
          
          echo -e "\n=== Test Check ===" | tee -a error-summary.txt
          npm test 2>&1 | tee -a error-summary.txt || echo "Tests failed"
          
          # エラー数をカウント
          ERROR_COUNT=$(grep -i "error" error-summary.txt | wc -l || echo "0")
          echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "has_errors=true" >> $GITHUB_OUTPUT
          else
            echo "has_errors=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Create main branch issue (if needed)
        if: steps.error-check.outputs.has_errors == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const errorSummary = fs.readFileSync('error-summary.txt', 'utf8');
            const errorCount = '${{ steps.error-check.outputs.error_count }}';
            
            // 既存のmainブランチエラーIssueをチェック
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'main-branch-error'
            });
            
            if (existingIssues.data.length > 0) {
              // 既存Issueを更新
              const issue = existingIssues.data[0];
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `## 🔄 mainブランチエラー更新\\n\\n**コミット**: ${context.sha}\\n**エラー数**: ${errorCount}\\n\\n\`\`\`\\n${errorSummary.slice(0, 1500)}\\n\`\`\``
              });
              console.log(`既存Issue #${issue.number} を更新しました`);
            } else {
              // 新しいIssueを作成（mainブランチ用のみ）
              let claudeModel = '[haiku]';
              if (parseInt(errorCount) > 10) {
                claudeModel = '[opus]';
              } else if (parseInt(errorCount) > 3) {
                claudeModel = '[sonnet]';
              }
              
              const issueBody = `@claude ${claudeModel}\\n\\n## 🚨 mainブランチでエラーが検出されました\\n\\n**重要**: これはmainブランチの品質問題です。優先的に修正してください。\\n\\n### 📊 エラー概要\\n- **エラー数**: ${errorCount}個\\n- **コミット**: ${context.sha}\\n- **発生日時**: ${new Date().toISOString()}\\n\\n### 🔍 詳細なエラー情報\\n\`\`\`\\n${errorSummary.slice(0, 2000)}\\n\`\`\`\\n\\n### ✅ 修正要求\\n- [ ] TypeScriptコンパイルエラーを修正\\n- [ ] ESLintエラーを修正\\n- [ ] テストエラーを修正\\n- [ ] 不足している依存関係を追加\\n\\n### 🎯 修正方針\\n1. **緊急度**: 高（mainブランチの品質問題）\\n2. **対象**: mainブランチで直接修正\\n3. **テスト**: 修正後に全テストを実行\\n4. **確認**: CI通過を確認\\n\\n---\\n*mainブランチ品質監視システムによって自動生成*`;

              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 [URGENT] mainブランチエラー検出 - ${new Date().toISOString().split('T')[0]}`,
                body: issueBody,
                labels: ['main-branch-error', 'urgent', 'bug']
              });
              
              console.log(`mainブランチエラーIssue #${issue.data.number} を作成しました`);
            }

      - name: Success notification
        if: steps.error-check.outputs.has_errors == 'false'
        run: |
          echo "✅ mainブランチは正常です - エラーは検出されませんでした" 