name: EAS Update

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize]

jobs:
  update:
    name: EAS Update
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: 🏗 チェックアウト
        uses: actions/checkout@v4

      - name: 🏗 Node.jsのセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: 📦 依存関係のインストール
        run: npm ci

      - name: 🔧 EAS CLIのセットアップ
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 📱 プレビューアップデートの公開（PRの場合）
        if: github.event_name == 'pull_request'
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          UPDATE_MESSAGE="PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}"
          
          # ブランチ名からチャンネル名を生成（英数字とハイフンのみ）
          CHANNEL_NAME="pr-$(echo $BRANCH_NAME | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')"
          
          # EAS Updateを実行
          eas update --branch $CHANNEL_NAME --message "$UPDATE_MESSAGE" --non-interactive
          
          # プレビューURLをPRにコメント
          echo "### 🚀 EAS Update プレビュー" >> comment.md
          echo "" >> comment.md
          echo "プレビューが公開されました！以下の方法で確認できます：" >> comment.md
          echo "" >> comment.md
          echo "#### 📱 Expo Goアプリで確認" >> comment.md
          echo "1. [Expo Go](https://expo.dev/client)をインストール" >> comment.md
          echo "2. アプリを開いて以下のリンクをタップ：" >> comment.md
          echo "   - 🔗 **exp://u.expo.dev/update/\$CHANNEL_NAME**" >> comment.md
          echo "" >> comment.md
          echo "#### 🖥 開発ビルドで確認" >> comment.md
          echo "\`\`\`bash" >> comment.md
          echo "# 既存の開発ビルドがある場合" >> comment.md
          echo "eas update --branch $CHANNEL_NAME --platform ios" >> comment.md
          echo "eas update --branch $CHANNEL_NAME --platform android" >> comment.md
          echo "\`\`\`" >> comment.md
          echo "" >> comment.md
          echo "#### 📊 アップデート情報" >> comment.md
          echo "- チャンネル: \`$CHANNEL_NAME\`" >> comment.md
          echo "- コミット: ${{ github.event.pull_request.head.sha }}" >> comment.md
          echo "- 更新日時: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> comment.md
          
          # GitHubのPRにコメントを投稿
          gh pr comment ${{ github.event.pull_request.number }} --body-file comment.md
        env:
          GH_TOKEN: ${{ github.token }}

      - name: 🚀 本番アップデートの公開（mainブランチ）
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          UPDATE_MESSAGE="Production update: ${{ github.sha }}"
          eas update --branch production --message "$UPDATE_MESSAGE" --non-interactive
          
          echo "✅ Production update published successfully!"

      - name: 🧪 開発アップデートの公開（developブランチ）
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        run: |
          UPDATE_MESSAGE="Development update: ${{ github.sha }}"
          eas update --branch development --message "$UPDATE_MESSAGE" --non-interactive
          
          echo "✅ Development update published successfully!"

      - name: 📋 アップデート情報の出力
        if: success()
        run: |
          echo "### EAS Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "✅ Preview update published for PR #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "✅ Production update published" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            echo "✅ Development update published" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY