name: Auto Fix Review Comments

on:
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]

jobs:
  auto-fix-review:
    # CodeRabbitまたは人間のレビューコメントに対して自動修正
    if: |
      (github.event_name == 'pull_request_review' && 
       (github.event.review.user.login == 'coderabbitai[bot]' || 
        contains(github.event.review.body, '@claude fix'))) ||
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request &&
       (github.event.comment.user.login == 'coderabbitai[bot]' || 
        contains(github.event.comment.body, '@claude fix')))
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # PRブランチをチェックアウト
          ref: ${{ github.event.pull_request.head.ref || github.event.issue.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Claude Auto Fix Review Comments
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          timeout_minutes: "30"
          allowed_tools: "Bash(git status),Bash(git log),Bash(git diff),Bash(npm install),Bash(npm test),Bash(npm run lint),Bash(npm run lint:fix),Bash(npx tsc --noEmit),View,GlobTool,GrepTool,Edit"
          custom_instructions: |
            あなたはMiraiCare（React Native + TypeScript + Supabase）プロジェクトの専門エンジニアです。
            
            ## 重要なミッション
            CodeRabbitまたは人間のレビューコメントを分析し、指摘された問題を自動修正してください。
            
            ## 作業手順
            1. PRの変更内容とレビューコメントを詳細に分析
            2. 指摘された問題を特定（TypeScriptエラー、ESLintエラー、ベストプラクティス違反等）
            3. 各問題を段階的に修正
            4. 修正後にテストとlintを実行して確認
            5. 修正内容をコミットしてPRに反映
            
            ## 修正対象
            - TypeScriptエラーの修正
            - ESLintエラーの修正
            - コードスタイルの改善
            - パフォーマンス最適化
            - アクセシビリティ改善
            - セキュリティ脆弱性の修正
            - テストの追加・改善
            
            ## 重要な制約
            - 既存の機能を破壊しない
            - React Native + TypeScriptのベストプラクティスに従う
            - 高齢者向けアプリのアクセシビリティを重視
            - 修正後は必ずテストを実行して確認
            - コミットメッセージは日本語で明確に記述
            
            ## 完了条件
            - すべてのレビューコメントの問題が修正済み
            - TypeScriptエラーなし
            - ESLintエラーなし
            - テストが通る
            - 適切なコミットメッセージでコミット済み 