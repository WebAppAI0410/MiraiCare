import * as functions from "firebase-functions-test";
import * as admin from "firebase-admin";

// „ÉÜ„Çπ„ÉàÁí∞Â¢É„ÅÆË®≠ÂÆö
const test = functions();

// Cloud Functions„ÅÆ„Ç§„É≥„Éù„Éº„Éà
import * as myFunctions from "../index";

// Firebase„ÅÆ„É¢„ÉÉ„ÇØ
jest.mock("firebase-admin", () => {
  const mockFirestore = {
    collection: jest.fn().mockReturnThis(),
    doc: jest.fn().mockReturnThis(),
    get: jest.fn(),
    set: jest.fn(),
    add: jest.fn(),
    where: jest.fn().mockReturnThis(),
    orderBy: jest.fn().mockReturnThis(),
    limit: jest.fn().mockReturnThis(),
    count: jest.fn().mockReturnThis(),
    batch: jest.fn(() => ({
      delete: jest.fn(),
      commit: jest.fn(),
    })),
    FieldValue: {
      serverTimestamp: jest.fn(() => new Date()),
    },
  };

  const mockMessaging = {
    send: jest.fn(),
  };

  return {
    initializeApp: jest.fn(),
    firestore: jest.fn(() => mockFirestore),
    messaging: jest.fn(() => mockMessaging),
  };
});

describe("Cloud Functions", () => {
  let mockFirestore: any;
  let mockMessaging: any;

  beforeEach(() => {
    jest.clearAllMocks();
    mockFirestore = admin.firestore();
    mockMessaging = admin.messaging();
  });

  afterAll(() => {
    test.cleanup();
  });

  describe("generateDailyReport", () => {
    it("„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„É¶„Éº„Ç∂„Éº„Å´„Éá„Ç§„É™„Éº„É¨„Éù„Éº„Éà„ÇíÈÄÅ‰ø°„Åô„Çã", async () => {
      const mockUsersSnapshot = {
        docs: [
          {
            id: "user1",
            data: () => ({
              fullName: "„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº",
              notificationsEnabled: true,
              dailyReportsEnabled: true,
              notificationToken: "test-token",
            }),
          },
        ],
      };

      const mockVitalDataSnapshot = {
        forEach: jest.fn((callback) => {
          callback({
            data: () => ({ steps: 5000, heartRate: 75 }),
          });
        }),
      };

      const mockMoodDataSnapshot = {
        size: 3,
      };

      mockFirestore.collection.mockReturnValue({
        get: jest.fn().mockResolvedValueOnce(mockUsersSnapshot),
        where: jest.fn().mockReturnThis(),
      });

      mockFirestore.where.mockImplementation(() => ({
        where: jest.fn().mockReturnThis(),
        get: jest.fn()
          .mockResolvedValueOnce(mockVitalDataSnapshot)
          .mockResolvedValueOnce(mockMoodDataSnapshot),
      }));

      mockMessaging.send.mockResolvedValue("message-id");
      mockFirestore.add.mockResolvedValue({ id: "notification-id" });

      // Cloud Function„ÇíÂÆüË°å
      const wrapped = test.wrap(myFunctions.generateDailyReport);
      await wrapped({});

      // „Ç¢„Çµ„Éº„Ç∑„Éß„É≥
      expect(mockMessaging.send).toHaveBeenCalledWith({
        token: "test-token",
        notification: {
          title: "‰ªäÊó•„ÅÆÂÅ•Â∫∑„É¨„Éù„Éº„Éà",
          body: expect.stringContaining("„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº„Åï„Çì"),
        },
        data: {
          type: "daily_report",
          userId: "user1",
          date: expect.any(String),
        },
      });

      expect(mockFirestore.add).toHaveBeenCalledWith({
        userId: "user1",
        type: "daily_report",
        title: "‰ªäÊó•„ÅÆÂÅ•Â∫∑„É¨„Éù„Éº„Éà",
        body: expect.any(String),
        createdAt: expect.any(Date),
        read: false,
        data: {
          totalSteps: 5000,
          avgHeartRate: 75,
          moodCount: 3,
          date: expect.any(String),
        },
      });
    });

    it("ÈÄöÁü•„ÅåÁÑ°Âäπ„Å™„É¶„Éº„Ç∂„Éº„Å´„ÅØ„É¨„Éù„Éº„Éà„ÇíÈÄÅ‰ø°„Åó„Å™„ÅÑ", async () => {
      const mockUsersSnapshot = {
        docs: [
          {
            id: "user1",
            data: () => ({
              fullName: "„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº",
              notificationsEnabled: false,
              dailyReportsEnabled: true,
              notificationToken: "test-token",
            }),
          },
        ],
      };

      mockFirestore.collection.mockReturnValue({
        get: jest.fn().mockResolvedValue(mockUsersSnapshot),
      });

      const wrapped = test.wrap(myFunctions.generateDailyReport);
      await wrapped({});

      expect(mockMessaging.send).not.toHaveBeenCalled();
    });
  });

  describe("checkBadgeAchievements", () => {
    it("10000Ê≠©ÈÅîÊàêÊôÇ„Å´„Éê„ÉÉ„Ç∏„Çí‰ªò‰∏é„Åô„Çã", async () => {
      const vitalData = {
        userId: "user1",
        steps: 10500,
        timestamp: new Date().toISOString(),
      };

      const mockBadgesSnapshot = {
        docs: [],
      };

      mockFirestore.collection.mockReturnValue({
        where: jest.fn().mockReturnThis(),
        get: jest.fn().mockResolvedValue(mockBadgesSnapshot),
        doc: jest.fn().mockReturnThis(),
        set: jest.fn().mockResolvedValue(true),
      });

      const mockUserDoc = {
        data: () => ({ notificationToken: "test-token" }),
      };
      mockFirestore.get.mockResolvedValue(mockUserDoc);

      const snap = {
        data: () => vitalData,
      };

      // Cloud Function„ÇíÂÆüË°å
      const wrapped = test.wrap(myFunctions.checkBadgeAchievements);
      await wrapped(snap, {});

      // „Éê„ÉÉ„Ç∏„Åå‰ªò‰∏é„Åï„Çå„Åü„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(mockFirestore.set).toHaveBeenCalledWith({
        userId: "user1",
        id: "badge-4",
        name: "„Ç¶„Ç©„Éº„Ç≠„É≥„Ç∞„Éû„Çπ„Çø„Éº",
        description: "1Êó•10,000Ê≠©ÈÅîÊàê",
        iconName: "walk",
        unlockedAt: expect.any(Date),
      });

      // ÈÄöÁü•„ÅåÈÄÅ‰ø°„Åï„Çå„Åü„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(mockMessaging.send).toHaveBeenCalledWith({
        token: "test-token",
        notification: {
          title: "üéâ Êñ∞„Åó„ÅÑ„Éê„ÉÉ„Ç∏„ÇíÁç≤ÂæóÔºÅ",
          body: "„Äå„Ç¶„Ç©„Éº„Ç≠„É≥„Ç∞„Éû„Çπ„Çø„Éº„Äç„Éê„ÉÉ„Ç∏„ÇíÁç≤Âæó„Åó„Åæ„Åó„ÅüÔºÅ",
        },
        data: {
          type: "badge_earned",
          badgeId: "badge-4",
          badgeName: "„Ç¶„Ç©„Éº„Ç≠„É≥„Ç∞„Éû„Çπ„Çø„Éº",
        },
      });
    });

    it("Êó¢„Å´Áç≤ÂæóÊ∏à„Åø„ÅÆ„Éê„ÉÉ„Ç∏„ÅØ‰ªò‰∏é„Åó„Å™„ÅÑ", async () => {
      const vitalData = {
        userId: "user1",
        steps: 10500,
        timestamp: new Date().toISOString(),
      };

      const mockBadgesSnapshot = {
        docs: [
          {
            data: () => ({ id: "badge-4" }),
          },
        ],
      };

      mockFirestore.collection.mockReturnValue({
        where: jest.fn().mockReturnThis(),
        get: jest.fn().mockResolvedValue(mockBadgesSnapshot),
      });

      const snap = {
        data: () => vitalData,
      };

      const wrapped = test.wrap(myFunctions.checkBadgeAchievements);
      await wrapped(snap, {});

      expect(mockFirestore.set).not.toHaveBeenCalled();
      expect(mockMessaging.send).not.toHaveBeenCalled();
    });
  });

  describe("sendReminderNotifications", () => {
    it("‰∫àÂÆöÊôÇÂàª„ÅÆ„É™„Éû„Ç§„É≥„ÉÄ„ÉºÈÄöÁü•„ÇíÈÄÅ‰ø°„Åô„Çã", async () => {
      const now = new Date();
      const reminderTime = new Date(now.getTime() + 3 * 60 * 1000); // 3ÂàÜÂæå

      const mockRemindersSnapshot = {
        docs: [
          {
            id: "reminder1",
            data: () => ({
              userId: "user1",
              type: "water",
              scheduledTime: reminderTime.toISOString(),
              completed: false,
            }),
          },
        ],
      };

      const mockUserDoc = {
        data: () => ({ notificationToken: "test-token" }),
      };

      mockFirestore.collection.mockReturnValue({
        where: jest.fn().mockReturnThis(),
        get: jest.fn().mockResolvedValue(mockRemindersSnapshot),
        doc: jest.fn().mockReturnThis(),
      });

      mockFirestore.get.mockResolvedValue(mockUserDoc);
      mockMessaging.send.mockResolvedValue("message-id");

      const wrapped = test.wrap(myFunctions.sendReminderNotifications);
      await wrapped({});

      expect(mockMessaging.send).toHaveBeenCalledWith({
        token: "test-token",
        notification: {
          title: "üíß Ê∞¥ÂàÜË£úÁµ¶„ÅÆÊôÇÈñì",
          body: "ÂÅ•Â∫∑„ÅÆ„Åü„ÇÅ„Å´Ê∞¥ÂàÜË£úÁµ¶„Çí„Åó„Åæ„Åó„Çá„ÅÜÔºÅ",
        },
        data: {
          type: "reminder",
          reminderId: "reminder1",
          reminderType: "water",
        },
      });
    });
  });

  describe("cleanupUserData", () => {
    it("ÂâäÈô§„Åï„Çå„Åü„É¶„Éº„Ç∂„Éº„ÅÆ„Éá„Éº„Çø„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Åô„Çã", async () => {
      const userId = "user1";
      const mockBatch = {
        delete: jest.fn(),
        commit: jest.fn(),
      };

      mockFirestore.batch.mockReturnValue(mockBatch);

      const mockSnapshot = {
        forEach: jest.fn((callback) => {
          callback({ ref: "doc-ref-1" });
          callback({ ref: "doc-ref-2" });
        }),
      };

      mockFirestore.collection.mockReturnValue({
        where: jest.fn().mockReturnThis(),
        get: jest.fn().mockResolvedValue(mockSnapshot),
      });

      const user = { uid: userId };
      const wrapped = test.wrap(myFunctions.cleanupUserData);
      await wrapped(user);

      // ÂêÑ„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„Åã„Çâ„Éá„Éº„Çø„ÅåÂâäÈô§„Åï„Çå„Åü„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(mockFirestore.collection).toHaveBeenCalledWith("users");
      expect(mockFirestore.collection).toHaveBeenCalledWith("vitalData");
      expect(mockFirestore.collection).toHaveBeenCalledWith("moodData");
      expect(mockFirestore.collection).toHaveBeenCalledWith("reminders");
      expect(mockFirestore.collection).toHaveBeenCalledWith("badges");
      expect(mockFirestore.collection).toHaveBeenCalledWith("notifications");

      expect(mockBatch.delete).toHaveBeenCalledTimes(12); // 6„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥ √ó 2„Éâ„Ç≠„É•„É°„É≥„Éà
      expect(mockBatch.commit).toHaveBeenCalled();
    });
  });
});